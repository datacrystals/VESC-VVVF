
;; Compiled C Binary Code
(def vvvf [
0x00 0x00 0x00 0x00 0x0a 0x4b 0x0b 0x49 0x0b 0x48 0x10 0xb5 0x7b 0x44 0x07 0x4c 0x1b 0x68 0x23 0x68
0x79 0x44 0x78 0x44 0x98 0x47 0x08 0x49 0x08 0x48 0x23 0x68 0x79 0x44 0x78 0x44 0x98 0x47 0x01 0x20
0x10 0xbd 0x00 0xbf 0x00 0xf8 0x00 0x10 0xf0 0xff 0xff 0xff 0xe5 0x01 0x00 0x00 0x36 0x00 0x00 0x00
0xc1 0x00 0x00 0x00 0x33 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x65 0x78 0x74 0x2d 0x74 0x65 0x73 0x74 0x00 0x65 0x78 0x74 0x2d 0x67 0x65 0x6e 0x65 0x72 0x61 0x74
0x65 0x2d 0x61 0x6e 0x64 0x2d 0x70 0x6c 0x61 0x79 0x2d 0x73 0x61 0x6d 0x70 0x6c 0x65 0x73 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x40 0x4c 0x58 0x64 0x6f 0x7b 0x86 0x91 0x9c 0xa6 0xb0 0xba
0xc3 0xcb 0xd3 0xdb 0xe1 0xe7 0xed 0xf2 0xf6 0xf9 0xfc 0xfd 0xff 0xff 0xff 0xfd 0xfc 0xf9 0xf6 0xf2
0xed 0xe7 0xe1 0xdb 0xd3 0xcb 0xc3 0xba 0xb0 0xa6 0x9c 0x91 0x86 0x7b 0x6f 0x64 0x58 0x4c 0x40 0x34
0x28 0x1c 0x11 0x05 0xfa 0xef 0xe4 0xda 0xd0 0xc6 0xbd 0xb5 0xad 0xa5 0x9f 0x99 0x93 0x8e 0x8a 0x87
0x84 0x83 0x81 0x81 0x81 0x83 0x84 0x87 0x8a 0x8e 0x93 0x99 0x9f 0xa5 0xad 0xb5 0xbd 0xc6 0xd0 0xda
0xe4 0xef 0xfa 0x05 0x11 0x1c 0x28 0x34 0xf0 0xb5 0x2d 0xed 0x04 0x8b 0x06 0x29 0x83 0xb0 0x40 0x4d
0x00 0xaf 0x04 0x46 0x06 0xd0 0xd5 0xf8 0x94 0x00 0x0c 0x37 0xbd 0x46 0xbd 0xec 0x04 0x8b 0xf0 0xbd
0xeb 0x6f 0x00 0x68 0x98 0x47 0x00 0x28 0xf3 0xd0 0xeb 0x6f 0x60 0x68 0x98 0x47 0x00 0x28 0xee 0xd0
0xeb 0x6f 0xa0 0x68 0x98 0x47 0x00 0x28 0xe9 0xd0 0xeb 0x6f 0xe0 0x68 0x98 0x47 0x00 0x28 0xe4 0xd0
0x6b 0x6f 0x20 0x69 0x98 0x47 0x00 0x28 0xdf 0xd0 0xeb 0x6f 0x60 0x69 0x98 0x47 0x00 0x28 0xda 0xd0
0x20 0x68 0xeb 0x6d 0x98 0x47 0x60 0x68 0xeb 0x6d 0xb0 0xee 0x40 0x8a 0x98 0x47 0xa0 0x68 0xeb 0x6d
0xb0 0xee 0x40 0x9a 0x98 0x47 0xe0 0x68 0xeb 0x6d 0x87 0xed 0x01 0x0a 0x98 0x47 0x6b 0x6e 0x60 0x69
0xf0 0xee 0x40 0x8a 0x98 0x47 0xc9 0xee 0x28 0x7a 0xc3 0x1d 0x23 0xf0 0x07 0x03 0xad 0xeb 0x03 0x0d
0xdf 0xf8 0x78 0xe0 0x01 0x46 0x00 0x26 0x68 0x46 0xfe 0x44 0x4f 0xf0 0x64 0x0c 0x9f 0xed 0x19 0x9a
0xd7 0xed 0x01 0x0a 0x67 0xee 0x89 0x7a 0x28 0xee 0x09 0x8a 0xfc 0xee 0xe7 0x7a 0xbc 0xee 0xc8 0x8a
0x17 0xee 0x90 0x3a 0x18 0xee 0x10 0x2a 0x9b 0xb2 0x94 0xb2 0x8e 0x42 0x0d 0xdb 0xd5 0xf8 0xd4 0x33
0xb0 0xee 0x68 0x0a 0x98 0x47 0x07 0xee 0x90 0x4a 0xb8 0xee 0x67 0x0a 0xeb 0x6c 0x80 0xee 0x09 0x0a
0x98 0x47 0x94 0xe7 0xb4 0xfb 0xfc 0xf2 0x0c 0xfb 0x12 0x42 0x1c 0x44 0xa4 0xb2 0x92 0xb2 0x63 0x2c
0x1e 0xf8 0x02 0x20 0x82 0x55 0x84 0xbf 0x64 0x3c 0xa4 0xb2 0x01 0x36 0xdf 0xe7 0x00 0xf8 0x00 0x10
0x00 0x00 0xc8 0x42 0xf6 0xfe 0xff 0xff 0x01 0x29 0x70 0xb5 0x09 0x4d 0x04 0x46 0x0d 0xd1 0xeb 0x6f
0x00 0x68 0x98 0x47 0x48 0xb1 0x6b 0x6e 0x20 0x68 0x2e 0x6c 0x98 0x47 0x33 0x46 0x00 0xeb 0x40 0x00
0xbd 0xe8 0x70 0x40 0x18 0x47 0xd5 0xf8 0x94 0x00 0x70 0xbd 0x00 0xf8 0x00 0x10 
])



;; Load the compiled c code
(load-native-lib vvvf)




(def chunk-size 400) ; Define the chunk size
(def pi 3.1415926535) ; Basic pi definition

;; Create buffers
(def buf1 (bufcreate chunk-size))
(def buf2 (bufcreate chunk-size))
(def buf3 (bufcreate chunk-size))

;; Global phase angles
(def command-phase 0.0) ; Phase for command signal
(def carrier-phase 0.0) ; Phase for carrier signal

;; Sample rate (Hz)
(def sample-rate 11025.0) ; THIS MUST HAVE THE DECIMAL IN IT SO IT'S A FLOAT!!

;; Motor current range (in amps)
(def min-current -10.0) ; Minimum motor current for mapping
(def max-current 100.0) ; Maximum motor current for mapping

;; Output voltage range (capped at 0.3)
(def min-voltage 0.01) ; Minimum output voltage for mapping
(def max-voltage 0.1) ; Maximum output voltage for mapping (capped at 0.3)

;; Processing Variables
(def motor_current 0.0) ; Current amperes of the motor
(def motor_rpm 0.0) ; Current rpm of motor
(def amplitude 0.0) ; Initialize amplitude to 0.0

; ;; PWM settings (as globals)
; (def spwm-type 'fixed) ; Can be 'fixed, 'ramp, 'sync, or 'rspwm
; (def spwm-carrier-frequency 1000) ; For 'fixed mode
; (def spwm-min-carrier-frequency 500) ; For 'ramp and 'rspwm modes
; (def spwm-max-carrier-frequency 2000) ; For 'ramp and 'rspwm modes
; (def spwm-pulse-mode 10) ; For 'sync mode (number of pulses per command cycle)
; (def spwm-wide-pulse nil) ; Enable wide pulse mode
; (def spwm-modulation-index 1.5) ; Modulation index for wide pulse mode


(defun map-value (value in-min in-max out-min out-max)
  ; "Maps a value from one range to another."
  (+ out-min (* (/ (- value in-min) (- in-max in-min)) (- out-max out-min))))

(defun generate-command (frequency amplitude phase)
  ; "Generates a command signal (sine wave)."
  (def angular-frequency (* 2 pi (/ frequency sample-rate))) ; Replaced let with def
  (* amplitude (sin (+ phase angular-frequency))))

(defun generate-carrier (frequency mode phase)
  ; "Generates a carrier signal (sawtooth or triangle wave)."
  (def angular-frequency (* 2 pi (/ frequency sample-rate))) ; Replaced let with def
  (case mode
    ('sawtooth (mod (+ phase angular-frequency) pi)) ; Sawtooth wave
    ('triangle (abs (- (* 2 (/ (mod (+ phase angular-frequency) pi) pi)) 1))) ; Triangle wave
    (t 0))) ; Default to 0

(defun generate-output (command carrier power-rail)
  ; "Generates the output signal based on the command and carrier signals."
  (cond
    ((and (> command 0) (> command carrier)) power-rail)
    ((and (< command 0) (< command (- carrier))) (- power-rail))
    (t 0)))

(defun get-carrier-frequency (erpm)
  ; "Calculates the carrier frequency based on the selected PWM mode."
  (case spwm-type
    ('fixed spwm-carrier-frequency) ; Fixed frequency
    ('ramp (+ spwm-min-carrier-frequency
               (* (/ (- erpm min-speed) (- max-speed min-speed))
                  (- spwm-max-carrier-frequency spwm-min-carrier-frequency)))) ; Ramp between min and max frequencies
    ('sync (* spwm-pulse-mode (/ (abs erpm) 60))) ; Sync with command frequency
    ('rspwm (+ spwm-min-carrier-frequency
                (* (random 1.0)
                   (- spwm-max-carrier-frequency spwm-min-carrier-frequency)))) ; Random switching
    (t spwm-carrier-frequency))) ; Default to fixed frequency








;; Main loop
(loopwhile t {
  ;; -- UPDATE RPM AND MOTOR CURRENT --
  (def motor_current (abs (get-current)))
  (def motor_rpm (get-rpm))

  ;; -- NOW, USING ACQUIRED DATA, CALCULATE AMPLITUDE --
  (def amplitude 0.0) ; Default to 0 amplitude unless otherwise specified
  (if (> (abs motor_current) 1)
      ; Map the range of amplitudes from the min current to max current across the min to max voltage
      (def amplitude (map-value (abs motor_current) min-current max-current min-voltage max-voltage)))

  ;; -- PLAY SAMPLES --
  (if (> amplitude -0.1)
      (progn
        ;; NOTE: The external generate and play samples is in the c code, and has these args
        ;; ext_generate_and_play_samples(phase, frequency, samplerate. buffer, chunksize)
        (def command-phase (ext-generate-and-play-samples command-phase 1000 0.05 sample-rate buf1 chunk-size))

       )
   )

})